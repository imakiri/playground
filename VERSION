VERSION 2.0
PROJECT gorum
SCHEMA main /!C(?<commit>\d+)(?: !R(?<release>\d+))?:(?<notes>[\s\S]+?)(?=\s!|$)/g
SCHEMA main.notes /--([\s\S]+?)(?=\s--|$)/g
DATA

!C75:
    --VERSION -> VERSION-old
    --VERSION: 2.0
    --erres: выделен в отдельный проект
    --service: устарел

!C74:
    --Исправления кода
    --data: Новые model и view типы

!C73:
    --Доработанны конструкторы сервисов
    --Множественные исправления кода
    --data.Auth: Имплементация дата методов

!C72:
    --utils -> service
    --Переработаны конструкторы сервисов
    --Чистка и множественные исправления кода
    --Обновлен cfg.proto

!C71:
    --core -> utils
    --transport: Удалён
    --cfg: Убраны и переработаны лишние зависимости от core и transport
    --cfg: Реарганизован прото и его имплементация
    --web: Обновлён конструктор и добавлен метод запуска сервиса
    --Переделанны лаунчеры

!C70:
    --Переименовывание проекта -> gorum
    --message: Множественные исправления кода
    --message: Добавлен адаптер Service

!C69:
    --Добавлена proto - папка с прото файлами
    --Настроена компиляция go_out, go-grpc_out в пакеты core, transport соответственно
    --Теперь внутренние сервисы получают конфигурацию от конфиг сервиса
    --Чистка устаревшего кода

!C68:
    --Реструктуризация папок проекта
    --Добавлен transport - пакет связности системы. В текущей реализации - gRPC
    --Добавлен message - пакет отправки сообщений
    --cfg: Методы и cfg(admin) сервисы перенесены из cmd в cfg
    --cmd: Реорганизация зависимостей, вынос параметров запуска в аргументы функций

!C67:
    --Реструктуризация папок проекта
    --Добавлен erres - пакет ошибок

!C66:
    --gate/auth: Первичная имплементация email сервиса

!C65:
    --gate/auth: Макет пакета

!C64:
    --gate/auth: Переименовывание типов и их реорганизация

!C63:
    --Минорная реорганизация файловой структуры проекта
    --gate/auth: Макет пакета

!C62:
    --Минорная реорганизация файловой структуры проекта
    --gate/auth: Макет пакета

!C61:
    --configService -> adminService и теперь GetConfig отправляет полноценный конфиг, а не только DSN

!C60:
    --Добавлена и настроена Docker контейнеризация
    --Добавлен grpc configService, от него главный сервис будет получать конфигурацию запуска

!C59:
    --Переписан лаунчер, востановленна возможность запуска
    --web: Root endpoint

!C58:
    --Изменение архитектуры проекта - теперь контроллеры pkg напрямую подключаются к базе
    --core: Пакет декларации структур и интерфейсов системы
    --data: Пакет декларации структур и функций базы данных
    --pkg: Пакеты имплементации сервисов системы
    --ei: External Interfaces - пакеты имплементации публичных интерфейсов
    --gate: Пакет связывающий систему и публичные интерфейсы

!С57:
    --Изменение цели проекта
    --Реструктуризация, реорганизация кода и архитектуры проекта
    --ips: Удалён
    --core: Множественные изменения кода

!C56:
    --gate, app, core: Скелет мененжера прав доступа и сессий

!C55:
    --data: Добавлен конструктор веб клиента
    --core: Изменена структура конфиг файла
    --core, data, api, app, web: Конструкторы теперь сохраняют только необходимые для работы переменные
    --app: Методы выделены в отдельный го файл
    --data: Восстановлена errorWrapper функция

!C54:
    --Рефакторинг и чистка, реимплементация и реорганизация большой части актуального кода в core, api, app, data

!C52:
    --Рефакторинг и чистка в core, web, cmd.public.HTTPServer

!C52:
    --cmd.private.ImageGenerator обновленна реализация

!C51:
    --cmd: +private.ImageGenerator

!C50:
    --web: Минорные улучшения\исправления

!C49:
    --web: Минорные исправления

!C48:
    --cmd.public.HTTPServer: Использование файла конфига для хранение имени домена ImageProcessing сервера


!С47:
    --protos: Учебная реализация gRPC - сервис FaceDetector
    --ips: Добавлена имплиментация protos.FaceDetector
    --cmd: Приложения public.HTTPServer и private.ImageProcessingServer
    --app, data, core, misc - legacy, не используется

!C46:
    --app.ip: Функция Detect
    --web: GetRootDetect
    --Реализация простой функции детектирования лица на основе OpenCV

!С45:
    --Реализация конфига yml+viper
    --Перекат на PostgreSQL
    --data: Реализация data методов с использованием "продвинутых" возможностей sqlx
    --core: Подготовка к реализации RPC интерфейса

!C44:
    --Минорные исправления
    --web: Реализация раздачи статики с помощью http.FileServer

!C43:
    --Подготовка к переходу на микросервисную архитектуру #core

!C42:
    --Возвращение к CamelCase

!C41:
    --data.Internal.Main: Минорные исправления
    --web: Добавлена тестовая версия #GET_Root_User_Login_1

!C40:
    --data.Internal.Main: Обновлен код ExecuteSQL методов
    --data.Internal.Main: Добавленны сущности и их ExecuteSQL методы
    #UpdateUser_1, #UpdateUserPassHash_1

!C39:
    --Чистка и рефакторинг
    #api #app #data #web

!C38:
    --data: Рефакторинг

!C37:
    --data: schema перемещена в inside
    --data/inside: Новая реализация методов данных, структур данных #MAIN
    --data/inside: Новая система имён. Не могу понять, в Go отсутствуют возможности адекватного вложения типов?

!C36:
    --data/inside: Исправлен баг #misc.go:60
    --data/inside: Добавлена SQL функция #GetUserV2 использующая sqlx

!C35:
    --data/schema: Обновлена схема базы данных #schema.sql
    --data/inside: Переименование файлов и типов
    #errUser.go -> #misc.go, и др.

!C34:
    --data/inside: Перекат на goqu - SQL функции V1
    --data/inside: Обновлен код ошибок #inside.go
    --data/inside: Добавлена новая ошибка #NoUserToDelete
    --data/inside: Переписана функция #build
    --data/inside: Добавлен интерфейс #Exec
    --data/inside: Переписаны SQL функции под новый интерфейс
    #GetUserV1, #GetUserPassHashV1, #CreateUserV1, #DeleteUserV1

!C33:
    --Обновлено README.md

!C32:
    --data/inside: Рефакторинг кода
    #errData.go, #errUser.go, #funcData.go, #funcUser.go
    --data/inside: Переход на switch-case в функциях проверки checker #errUser.go
    --data/inside: Добавлена новая ошибка #UserAlreadyExistError

!C31:
    --data/inside: Реструктуризация кода
    #check.go, #err.go

!C30:
    --Тестирование обработки ошибок с помощью type switches
    #misc.Test3, #data/inside.InternalServiceError

!C29:
    --data/inside: Переименование файлов
    #inside.go, #outside.go

!C28:
    --Минорные исправления\багфиксы #misc.Test2

!C27:
    --Минорные исправления\багфиксы
    #data/inside/checkerImp.createUser, #app.IsAuthorized

!C26:
    --Переименование папок в связи с особеннсотями golang
    #data/internal -> #data/inside, #data/external -> #data/outside
    --data/inside: Первичная имплементация обработчика ошибок
    #checker, #checkerImp, #IncorrectArgumentError, #NotFoundError
    --Тестирование обработки ошибок с помощью type switches #misc.Test2

!C25:
    --Минорные исправления\багфиксы

!C24:
    --Реструктурирование\чистка кода

!C23:
    --Адаптирование под запуск на виртуальном сервере Ubuntu

!C22:
    --Удалена WaitGroup за ненадобностью
    --data: Реструктурирован код
    --data/internal: Код модуля написан на ~33%

!C21:
    --Добавлена история версий\коммитов