VERSION 1.2
PROJECT gorum
SCHEMA main /!V(?<release>\d+)(?:\.(?<commit>\d+))(?:\.(?<subcommit>\d+))?:(?<noteList>[\s\S]+?)(?=\s!|$)/g
SCHEMA main.notes /--([\s\S]+?)(?=\s--|$)/g
DATA

!0.86:
    --web: Теперь при запуске подгружает assets с asset сервера
    --cmd: Восстановлены лаунчеры asset и web
    --Обновленны docker-related конфиг файлы

!V0.85.4:
    --postgres: Обновленны сигнатуры функций данных, теперь они принимают тип Connection вместо sqlx.DB
    --data: Частично востановлены сервисы данных
    --types: Удалён. Проект стоится на многоуровневой архитектуре, где не требуются глобальные пакеты связности
    --transport: Удалён. "Расшаренные" пакеты теперь будут содержать внутри себя пакет transport с объявленными типами и сервисами доступными удалённо по gRPC
    --asset/transport: Добавлен

!V0.85.3:
    --Все пакеты проекта перемещены в internal
    --Добавлены папки assets и configs - папки данных пакетов asset и cfg соответственно
    --log: Теперь сервис удовлетворяет интерфейсу pgx.Logger
    --log: Обёртка zap.Logger
    --cfg: Обновлен код и структура конфигов
    --postgres: Connection перемещён из content
    --postgres: Обновленны сигнатуры функций данных, теперь они принимают тип Connection вместо sqlx.DB
    --postgres: Обновленн конструктор типа Connection
    --Обновленны docker-related конфиг файлы
    --Множественные исправления и улучшения кода

!V0.85.2:
    --Добавлен cfg - пакет чтения конфигов
    --Обновлен конструктор content.NewAvatarService
    --Множественные исправления и улучшения кода

!V0.85.1:
    --content: service -> connectionPostgres
    --VERSION 1.2

!V0.85:
    --assets: Менеджер служебных html-related файлов
    --content: CDN на минималках
    --message: Удалён
    --data: Файловая реструктуризация
    --postgres: Файловая реструктуризация
    --web: Сломан(нужно починить потом)

!V0.84:
    --web: Доработана архитектура пакета
    --web: Убран файл-сервер, добавлены /assets/css и /assets/ico
    --web: Настроены HTTP/2 и Pusher

!V0.83:
    --Секреты вынесены из изображения и подключаются при запуске контейнера
    --Изображение web модуля теперь доступно по адресу https://hub.docker.com/r/imakiri/web
    --Настроен docker stack deploy

!V0.82:
    --web: Реорганизация структуры пакета и сервисов
    --cmd: Обновлен web лаунчер
    --Множественные исправления и улучшения кода

!V0.81:
    --web.dockerfile
    --Минорные улучшения кода

!V0.80:
    --cfg: Удалён
    --postgres: Добавлен. Пакет функций-запросов к постгрес базе
    --data: Функции-запросы вынесены в postgres
    --cmd: web, app лаунчеры
    --Множественные исправления и улучшения кода

!V0.79:
    --web: TLS 1.3 only
    --Секреты перемещенны cfg -> secrets
    --Подготовка к удалению cfg и переходу на функционал конфигов/секретов докера
    --Минорные улучшения

!V0.78:
    --Обратно добавлен transport - пакет для go-grpc_out
    --Добавлен types - пакет для go-out
    --transport: Обновлен Config сервис
    --types: Обновленны типы Config
    --data: Типы данных перемещенны в types
    --data: Экстракция методов ServicePostgres в отдельные функции
    --cfg: Обновление сигнатуры сервиса
    --Переделаны конструкторы сервисов - теперь они требуют сам конфиг вместо конфиг клиента
    --Множественные исправления и улучшения кода

!V0.77:
    --data: Схема базы данных
    --data: Postgres сервис, добавленны новые методы данных
    --web: Добавлен HandlerForum
    --Множественные исправления кода

!V0.76:
    --VERSION: 1.1
    --app: Добавленны сервисы User, Thread, Post и их конструкторы
    --cmd: Добавлена поддержка флагов запуска
    --data: Добавленны новые типы данных

!V0.75:
    --VERSION -> VERSION-old
    --VERSION: 2.0
    --erres: выделен в отдельный проект
    --service: устарел

!V0.74:
    --Исправления кода
    --data: Новые model и view типы

!V0.73:
    --Доработанны конструкторы сервисов
    --Множественные исправления кода
    --data.Auth: Имплементация дата методов

!V0.72:
    --utils -> service
    --Переработаны конструкторы сервисов
    --Чистка и множественные исправления кода
    --Обновлен cfg.proto

!V0.71:
    --core -> utils
    --transport: Удалён
    --cfg: Убраны и переработаны лишние зависимости от core и transport
    --cfg: Реарганизован прото и его имплементация
    --web: Обновлён конструктор и добавлен метод запуска сервиса
    --Переделанны лаунчеры

!V0.70:
    --Переименовывание проекта -> gorum
    --message: Множественные исправления кода
    --message: Добавлен адаптер Service

!V0.69:
    --Добавлена proto - папка с прото файлами
    --Настроена компиляция go_out, go-grpc_out в пакеты core, transport соответственно
    --Теперь внутренние сервисы получают конфигурацию от конфиг сервиса
    --Чистка устаревшего кода

!V0.68:
    --Реструктуризация папок проекта
    --Добавлен transport - пакет связности системы. В текущей реализации - gRPC
    --Добавлен message - пакет отправки сообщений
    --cfg: Методы и cfg(admin) сервисы перенесены из cmd в cfg
    --cmd: Реорганизация зависимостей, вынос параметров запуска в аргументы функций

!V0.67:
    --Реструктуризация папок проекта
    --Добавлен erres - пакет ошибок

!V0.66:
    --gate/auth: Первичная имплементация email сервиса

!V0.65:
    --gate/auth: Макет пакета

!V0.64:
    --gate/auth: Переименовывание типов и их реорганизация

!V0.63:
    --Минорная реорганизация файловой структуры проекта
    --gate/auth: Макет пакета

!V0.62:
    --Минорная реорганизация файловой структуры проекта
    --gate/auth: Макет пакета

!V0.61:
    --configService -> adminService и теперь GetConfig отправляет полноценный конфиг, а не только DSN

!V0.60:
    --Добавлена и настроена Docker контейнеризация
    --Добавлен grpc configService, от него главный сервис будет получать конфигурацию запуска

!V0.59:
    --Переписан лаунчер, востановленна возможность запуска
    --web: Root endpoint

!V0.58:
    --Изменение архитектуры проекта - теперь контроллеры pkg напрямую подключаются к базе
    --core: Пакет декларации структур и интерфейсов системы
    --data: Пакет декларации структур и функций базы данных
    --pkg: Пакеты имплементации сервисов системы
    --ei: External Interfaces - пакеты имплементации публичных интерфейсов
    --gate: Пакет связывающий систему и публичные интерфейсы

!V0.57:
    --Изменение цели проекта
    --Реструктуризация, реорганизация кода и архитектуры проекта
    --ips: Удалён
    --core: Множественные изменения кода

!V0.56:
    --gate, app, core: Скелет мененжера прав доступа и сессий

!V0.55:
    --data: Добавлен конструктор веб клиента
    --core: Изменена структура конфиг файла
    --core, data, api, app, web: Конструкторы теперь сохраняют только необходимые для работы переменные
    --app: Методы выделены в отдельный го файл
    --data: Восстановлена errorWrapper функция

!V0.54:
    --Рефакторинг и чистка, реимплементация и реорганизация большой части актуального кода в core, api, app, data

!V0.52:
    --Рефакторинг и чистка в core, web, cmd.public.HTTPServer

!V0.52:
    --cmd.private.ImageGenerator обновленна реализация

!V0.51:
    --cmd: +private.ImageGenerator

!V0.50:
    --web: Минорные улучшения\исправления

!V0.49:
    --web: Минорные исправления

!V0.48:
    --cmd.public.HTTPServer: Использование файла конфига для хранение имени домена ImageProcessing сервера

!V0.47:
    --protos: Учебная реализация gRPC - сервис FaceDetector
    --ips: Добавлена имплиментация protos.FaceDetector
    --cmd: Приложения public.HTTPServer и private.ImageProcessingServer
    --app, data, core, misc - legacy, не используется

!V0.46:
    --app.ip: Функция Detect
    --web: GetRootDetect
    --Реализация простой функции детектирования лица на основе OpenCV

!V0.45:
    --Реализация конфига yml+viper
    --Перекат на PostgreSQL
    --data: Реализация data методов с использованием "продвинутых" возможностей sqlx
    --core: Подготовка к реализации RPC интерфейса

!V0.44:
    --Минорные исправления
    --web: Реализация раздачи статики с помощью http.FileServer

!V0.43:
    --Подготовка к переходу на микросервисную архитектуру #core

!V0.42:
    --Возвращение к CamelCase

!V0.41:
    --data.Internal.Main: Минорные исправления
    --web: Добавлена тестовая версия #GET_Root_User_Login_1

!V0.40:
    --data.Internal.Main: Обновлен код ExecuteSQL методов
    --data.Internal.Main: Добавленны сущности и их ExecuteSQL методы
    #UpdateUser_1, #UpdateUserPassHash_1

!V0.39:
    --Чистка и рефакторинг
    #api #app #data #web

!V0.38:
    --data: Рефакторинг

!V0.37:
    --data: schema перемещена в inside
    --data/inside: Новая реализация методов данных, структур данных #MAIN
    --data/inside: Новая система имён. Не могу понять, в Go отсутствуют возможности адекватного вложения типов?

!V0.36:
    --data/inside: Исправлен баг #misc.go:60
    --data/inside: Добавлена SQL функция #GetUserV2 использующая sqlx

!V0.35:
    --data/schema: Обновлена схема базы данных #schema.sql
    --data/inside: Переименование файлов и типов
    #errUser.go -> #misc.go, и др.

!V0.34:
    --data/inside: Перекат на goqu - SQL функции V1
    --data/inside: Обновлен код ошибок #inside.go
    --data/inside: Добавлена новая ошибка #NoUserToDelete
    --data/inside: Переписана функция #build
    --data/inside: Добавлен интерфейс #Exec
    --data/inside: Переписаны SQL функции под новый интерфейс
    #GetUserV1, #GetUserPassHashV1, #CreateUserV1, #DeleteUserV1

!V0.33:
    --Обновлено README.md

!V0.32:
    --data/inside: Рефакторинг кода
    #errData.go, #errUser.go, #funcData.go, #funcUser.go
    --data/inside: Переход на switch-case в функциях проверки checker #errUser.go
    --data/inside: Добавлена новая ошибка #UserAlreadyExistError

!V0.31:
    --data/inside: Реструктуризация кода
    #check.go, #err.go

!V0.30:
    --Тестирование обработки ошибок с помощью type switches
    #misc.Test3, #data/inside.InternalServiceError

!V0.29:
    --data/inside: Переименование файлов
    #inside.go, #outside.go

!V0.28:
    --Минорные исправления\багфиксы #misc.Test2

!V0.27:
    --Минорные исправления\багфиксы
    #data/inside/checkerImp.createUser, #app.IsAuthorized

!V0.26:
    --Переименование папок в связи с особеннсотями golang
    #data/internal -> #data/inside, #data/external -> #data/outside
    --data/inside: Первичная имплементация обработчика ошибок
    #checker, #checkerImp, #IncorrectArgumentError, #NotFoundError
    --Тестирование обработки ошибок с помощью type switches #misc.Test2

!V0.25:
    --Минорные исправления\багфиксы

!V0.24:
    --Реструктурирование\чистка кода

!V0.23:
    --Адаптирование под запуск на виртуальном сервере Ubuntu

!V0.22:
    --Удалена WaitGroup за ненадобностью
    --data: Реструктурирован код
    --data/internal: Код модуля написан на ~33%

!V0.21:
    --Добавлена история версий\коммитов